Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: blog-user-pool
      AccountRecoverySetting: # パスワード忘れた時のアカウント復旧
        RecoveryMechanisms:
          - Name: verified_email # どの属性を確認するか
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true # 管理者のみがユーザプロファイル作成できる
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}'
          EmailSubject: 'Your temporary password'
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT #COGNITOからメール送信する
      EmailVerificationMessage: 'Your verification code is {####}'
      EmailVerificationSubject: 'Your verification code'
      MfaConfiguration: OFF
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: preferred_username
          Required: true
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: nickname
          Required: true
      UsernameConfiguration:
        CaseSensitive: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}'
        EmailSubject: 'Your verification code'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:provider.stage}-blog-user-pool-client
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - http://localhost:3000
      DefaultRedirectURI: http://localhost:3000
      LogoutURLs:
        - http://localhost:3000
      # ユーザーが存在しない場合、認証は、ユーザー名またはパスワードが正しくないことを示すエラーを返す(セキュリティ的に良い)
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 7
      ReadAttributes:
        - email
        - preferred_username
      WriteAttributes: # アプリクライアントが書き込むことができるユーザプール属性(OIDCログイン時に必要となる)
        - email
        - preferred_username
        - nickname
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: # ユーザプールを指定することでユーザの認証トークンを元にユーザグループを判別し適切なSTSを発行できる
        Ref: CognitoUserPool

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: my-super-blog
      UserPoolId:
        Ref: CognitoUserPool

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - ApiGatewayRestApi
    Properties:
      Name: ApiAuthorizer
      RestApiId: # slsが暗黙的に作成するAPI Gatewayを指定
        Ref: ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs: # Cognitoユーザプールを指定
        - Fn::GetAtt: [CognitoUserPool, Arn]
      IdentitySource: method.request.header.Authorization
      AuthorizerResultTtlInSeconds: 3600