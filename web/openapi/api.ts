// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * blog
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface Blog
 */
export interface Blog {
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  content: string;
  /**
   *
   * @type {Date}
   * @memberof Blog
   */
  createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Blog
   */
  updatedAt: Date;
  /**
   *
   * @type {number}
   * @memberof Blog
   */
  isPublished: number;
}
/**
 *
 * @export
 * @interface BlogCreate
 */
export interface BlogCreate {
  /**
   *
   * @type {string}
   * @memberof BlogCreate
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof BlogCreate
   */
  content: string;
}
/**
 *
 * @export
 * @interface BlogUpdate
 */
export interface BlogUpdate {
  /**
   *
   * @type {string}
   * @memberof BlogUpdate
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof BlogUpdate
   */
  content?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string>}
   * @memberof ValidationError
   */
  loc: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(
      blogCreate: BlogCreate,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'blogCreate' is not null or undefined
      if (blogCreate === null || blogCreate === undefined) {
        throw new RequiredError(
          "blogCreate",
          "Required parameter blogCreate was null or undefined when calling createBlogBlogsPost."
        );
      }
      const localVarPath = `/blogs`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      const needsSerialization =
        <any>"BlogCreate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(blogCreate !== undefined ? blogCreate : {})
        : blogCreate || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Blog
     * @param {string} blogTitle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogBlogTitleDelete(
      blogTitle: string,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'blogTitle' is not null or undefined
      if (blogTitle === null || blogTitle === undefined) {
        throw new RequiredError(
          "blogTitle",
          "Required parameter blogTitle was null or undefined when calling deleteBlogBlogBlogTitleDelete."
        );
      }
      const localVarPath = `/blog/{blog_title}`.replace(
        `{${"blog_title"}}`,
        encodeURIComponent(String(blogTitle))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Blog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogBlogsGet(options: any = {}): RequestArgs {
      const localVarPath = `/blogs`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Blog
     * @param {string} blogTitle
     * @param {BlogUpdate} blogUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBlogBlogBlogTitlePatch(
      blogTitle: string,
      blogUpdate: BlogUpdate,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'blogTitle' is not null or undefined
      if (blogTitle === null || blogTitle === undefined) {
        throw new RequiredError(
          "blogTitle",
          "Required parameter blogTitle was null or undefined when calling updateBlogBlogBlogTitlePatch."
        );
      }
      // verify required parameter 'blogUpdate' is not null or undefined
      if (blogUpdate === null || blogUpdate === undefined) {
        throw new RequiredError(
          "blogUpdate",
          "Required parameter blogUpdate was null or undefined when calling updateBlogBlogBlogTitlePatch."
        );
      }
      const localVarPath = `/blog/{blog_title}`.replace(
        `{${"blog_title"}}`,
        encodeURIComponent(String(blogTitle))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers,
      };
      const needsSerialization =
        <any>"BlogUpdate" !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(blogUpdate !== undefined ? blogUpdate : {})
        : blogUpdate || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(
      blogCreate: BlogCreate,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).createBlogBlogsPost(blogCreate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete Blog
     * @param {string} blogTitle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogBlogTitleDelete(
      blogTitle: string,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).deleteBlogBlogBlogTitleDelete(blogTitle, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List Blog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogBlogsGet(
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Blog>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).listBlogBlogsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update Blog
     * @param {string} blogTitle
     * @param {BlogUpdate} blogUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBlogBlogBlogTitlePatch(
      blogTitle: string,
      blogUpdate: BlogUpdate,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(
        configuration
      ).updateBlogBlogBlogTitlePatch(blogTitle, blogUpdate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create Blog
     * @param {BlogCreate} blogCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBlogBlogsPost(blogCreate: BlogCreate, options?: any) {
      return DefaultApiFp(configuration).createBlogBlogsPost(
        blogCreate,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary Delete Blog
     * @param {string} blogTitle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlogBlogBlogTitleDelete(blogTitle: string, options?: any) {
      return DefaultApiFp(configuration).deleteBlogBlogBlogTitleDelete(
        blogTitle,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary List Blog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBlogBlogsGet(options?: any) {
      return DefaultApiFp(configuration).listBlogBlogsGet(options)(
        axios,
        basePath
      );
    },
    /**
     *
     * @summary Update Blog
     * @param {string} blogTitle
     * @param {BlogUpdate} blogUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBlogBlogBlogTitlePatch(
      blogTitle: string,
      blogUpdate: BlogUpdate,
      options?: any
    ) {
      return DefaultApiFp(configuration).updateBlogBlogBlogTitlePatch(
        blogTitle,
        blogUpdate,
        options
      )(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Create Blog
   * @param {BlogCreate} blogCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createBlogBlogsPost(blogCreate: BlogCreate, options?: any) {
    return DefaultApiFp(this.configuration).createBlogBlogsPost(
      blogCreate,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary Delete Blog
   * @param {string} blogTitle
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteBlogBlogBlogTitleDelete(blogTitle: string, options?: any) {
    return DefaultApiFp(this.configuration).deleteBlogBlogBlogTitleDelete(
      blogTitle,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary List Blog
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public listBlogBlogsGet(options?: any) {
    return DefaultApiFp(this.configuration).listBlogBlogsGet(options)(
      this.axios,
      this.basePath
    );
  }

  /**
   *
   * @summary Update Blog
   * @param {string} blogTitle
   * @param {BlogUpdate} blogUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateBlogBlogBlogTitlePatch(
    blogTitle: string,
    blogUpdate: BlogUpdate,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).updateBlogBlogBlogTitlePatch(
      blogTitle,
      blogUpdate,
      options
    )(this.axios, this.basePath);
  }
}
